/*
 * This source file was generated by the Skeletal project creation tool.
 * https://github.com/cbmarcum/skeletal
 */
package ${project_package}


import picocli.CommandLine
import picocli.CommandLine.ArgGroup
import picocli.CommandLine.Command
import picocli.CommandLine.Option
import picocli.CommandLine.Parameters

import org.slf4j.Logger
import org.slf4j.LoggerFactory

@Command(name = "${project_name}", mixinStandardHelpOptions = true, version = "${project_capitalized_name} ${project_version}")
class ${project_class_name} implements Runnable {

    final Logger logger = LoggerFactory.getLogger(${project_class_name}.class)

    // mutually exclusive arguments and there must be 1
    @ArgGroup(exclusive = true, multiplicity = "1")
    OperatorOptions operatorOptions

    static class OperatorOptions {
        @Option(names = ['-a', '--add'], description = 'Add values.')
        boolean add

        @Option(names = ['-s', '--subtract'], description = 'Subtract values.')
        boolean subtract
    }

    // Single-value @Parameters are always mandatory,
    // because single-value positional parameters have arity = "1" by default.
    @Parameters(index = "0")
    Integer operand1

    @Parameters(index = "1")
    Integer operand2

    @Option(names = ['-v', '--verbose'], description = 'Verbose mode. Helpful for troubleshooting.')
    boolean verbose

    Integer result = 0

    void run() {
        if (verbose) {
            println("Verbose option enabled...")
        }

        logger.info("operand1 = ${dollar}{operand1}")
        logger.info("operand2 = ${dollar}{operand2}")

        // add/subtract are exclusive options so only one will be used
        if (operatorOptions.add) {
            result = operand1 + operand2
            println("${dollar}{operand1} + ${dollar}{operand2} = ${dollar}{result}")
        }
        if (operatorOptions.subtract) {
            result = operand1 - operand2
            println("${dollar}{operand1} - ${dollar}{operand2} = ${dollar}{result}")
        }

    }

    static void main(String[] args) {
        int exitCode = new CommandLine(new ${project_class_name}()).execute(args)
        System.exit(exitCode)
    }
}
