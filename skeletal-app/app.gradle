/* build a distribution with:
* ./gradlew distZip
* run tests and report with:
* ./gradlew check
*/
plugins {
    id 'groovy'
    id 'application'
    id "net.codebuilders.lazybones-templates" version "${lazybonesGradlePluginVersion}"
    id "io.sdkman.vendors" version "2.0.0"
}

import uk.co.cacoethes.gradle.tasks.BintrayGenericUpload

archivesBaseName = 'skeletal-app'

applicationName = "skeletal"
mainClassName = "uk.co.cacoethes.lazybones.LazybonesMain"
// make sure to update the asciidoc guide headers also
version = "0.13.3"

// These settings mimic the old client VM behavior. Should result in faster startup.
applicationDefaultJvmArgs = ["-XX:+TieredCompilation", "-XX:TieredStopAtLevel=1", "-XX:CICompilerCount=3"]

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

ext {
    groovyVersion = "3.0.12" // was 2.4.15
    cachePath = new File(System.getProperty("user.home"), ".skeletal/templates").absolutePath
    isCiBuild = System.getProperty("drone.io") as boolean
    testWorkDir = file("$buildDir/testWork").path
}

sourceSets {
    integTest {
        groovy {
            srcDir "src/integ/groovy"
            compileClasspath += sourceSets.main.output
        }
        resources {
            srcDir "src/integ/resources"
        }
    }
}

configurations {
    integTestImplementation.resolutionStrategy {
        force "org.codehaus.groovy:groovy-all:${groovyVersion}"
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation "org.codehaus.groovy:groovy:${groovyVersion}"
    implementation "org.codehaus.groovy:groovy-all:${groovyVersion}"

    implementation "commons-io:commons-io:2.7"
    implementation "org.codehaus.groovy:groovy-json:${groovyVersion}"
    implementation "org.codehaus.groovy:groovy-templates:${groovyVersion}"
    implementation "org.apache.commons:commons-compress:1.5"
    implementation "com.github.groovy-wslite:groovy-wslite:1.1.2"
    implementation "net.sf.jopt-simple:jopt-simple:4.4"
    implementation "org.ini4j:ini4j:0.5.2"

    implementation "com.opencsv:opencsv:5.5.1"

    runtimeOnly "org.apache.ivy:ivy:2.3.0"

    testImplementation 'org.spockframework:spock-core:2.1-groovy-3.0'
    testImplementation 'junit:junit:4.13.2'

    // you can use testRuntimeClasspath if you don't want to use spock-report-specific features in your Specs
    testImplementation( "com.athaydes:spock-reports:2.3.1-groovy-3.0" ) {
        transitive = false // this avoids affecting your version of Groovy/Spock
    }
    // if you don't already have slf4j-api and an implementation of it in the classpath, add this!
    testImplementation 'org.slf4j:slf4j-api:1.7.30'
    testRuntimeClasspath 'org.slf4j:slf4j-simple:1.7.30'


    integTestImplementation "org.codehaus.groovy:groovy-all:${groovyVersion}",
                     "commons-io:commons-io:2.7",
                     "co.freeside:betamax:1.1.2",
                     "org.littleshoot:littleproxy:1.1.0-beta1"

    integTestImplementation 'org.spockframework:spock-core:2.1-groovy-3.0'

    // you can use testRuntimeClasspath if you don't want to use spock-report-specific features in your Specs
    integTestImplementation( "com.athaydes:spock-reports:2.3.1-groovy-3.0" ) {
        transitive = false // this avoids affecting your version of Groovy/Spock
    }
    // if you don't already have slf4j-api and an implementation of it in the classpath, add this!
    integTestImplementation 'org.slf4j:slf4j-api:1.7.30'
    integTestRuntimeClasspath 'org.slf4j:slf4j-simple:1.7.30'

}


jar {
    manifest {
        attributes("Implementation-Title": "Skeletal", "Implementation-Version": project.version)
    }
}

sdkman {
    api = "https://vendors.sdkman.io/"
    candidate = project.applicationName
    version = project.version
    url = "https://bintray.com/artifact/download/pledbrook/lazybones-templates/${project.applicationName}-${project.version}.zip"
    hashtag = "#lazybones"
}

lazybones {
    templateDirs = files(file("${projectDir}/src/integTest/templates").listFiles())
    template "subtemplates-tmpl" includes "controller", "entity", "bad"
    template "test-handlebars", {
        version = "0.1.1"
    }
}

packageAllTemplates.dependsOn("packageTemplate-Oops-stuff")
installAllTemplates.dependsOn("installTemplate-Oops-stuff")

task configureCachePath {
    if (isCiBuild) {
        // Load the default cache directory location from the default config file.
        // We have to defer the evaluation until after the test resources have been
        // copied onto the classpath.
        def defaultConfigFile = sourceSets.main.resources.filter { it.name == "uk.co.cacoethes.lazybones.config.defaultConfig.groovy" }.singleFile
        def defaultConfig = new ConfigSlurper().parse(defaultConfigFile.text)
        project.cachePath = defaultConfig.cache.dir
    }
    else {
        project.cachePath = testWorkDir + "/template-cache"
    }

    project.extensions.lazybones.installDir = new File(project.cachePath)
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()

    // spock reports
    systemProperty 'com.athaydes.spockframework.report.showCodeBlocks', true
}

// for a single test, you can run:
// ./gradlew integTest --tests=uk.co.cacoethes.lazybones.ConfigFunctionalSpec
task integTest(type: Test) {
    dependsOn "installDist", "configureCachePath", "installAllTemplates"

    testClassesDirs = sourceSets.integTest.output.classesDirs
    classpath = sourceSets.integTest.runtimeClasspath
    shouldRunAfter test

    ignoreFailures = true

    systemProperty "integration.test", "true"
    systemProperty "lazybones.testWorkDir", testWorkDir
    systemProperty "lazybones.installDir", installDist.destinationDir.path
    systemProperty "lzbtest.expected.version", version

    // Allows us to disable tests that don't work on Drone.io, such as the
    // CreateFunctionalSpec feature test for --with-git.
    systemProperty "lazybones.config.file",
                   new File(sourceSets.integTest.output.resourcesDir, "test-config.groovy").absolutePath

    def cachePath
    if (isCiBuild) {
        systemProperty "drone.io", "true"
    }
    else {
        // Use the default cache location on the CI server, but a custom one
        // on local machines to avoid polluting the developer's own cache.
        systemProperty "lazybones.cache.dir", project.cachePath
    }

    testClassesDirs = sourceSets.integTest.output.classesDirs
    classpath = sourceSets.integTest.runtimeClasspath

    include "**/*Spec*"
    exclude "**/Abstract*Spec*"

    useJUnitPlatform()
}

task packageReports(type: Zip) {
    from "build/reports"
    archiveFileName = "reports.zip"
    destinationDirectory = buildDir
}

integTest.finalizedBy packageReports

distZip.dependsOn("test", "integTest")
check.dependsOn("test", "integTest")

task uploadDist(type: BintrayGenericUpload, dependsOn: "distZip") {
    artifactFile = distZip.archiveFile.get().asFile
    artifactUrlPath = "lazybones/${version}/${distZip.archiveFileName}"
    repositoryName = "pledbrook/lazybones-templates"
    packageName = "lazybones"
    licenses = ["Apache-2.0"]
}

task release(dependsOn: ["uploadDist", "sdkMajorRelease"])
sdkMajorRelease.mustRunAfter uploadDist

// Lazy initialisation of uploadDist task so that not all build users need to
// set the repo.* project properties.
//
// We also lazily configure the cache directory system property when running
// the integration tests. This is to ensure that the test-tmpl template gets
// installed into the cache directory being used by the integration tests.
gradle.taskGraph.whenReady { graph ->
    if (graph.hasTask(":lazybones-app:uploadDist")) {
        verifyProperty(project, 'repo.username')
        verifyProperty(project, 'repo.apiKey')

        uploadDist.username = project.'repo.username'
        uploadDist.apiKey = project.'repo.apiKey'
    }

    if (graph.hasTask(":lazybones-app:sdkMajorRelease")) {
        verifyProperty(project, 'gvm.consumerKey')
        verifyProperty(project, 'gvm.consumerToken')
        sdkMajorRelease.consumerKey = project.'gvm.consumerKey'
        sdkMajorRelease.consumerToken = project.'gvm.consumerToken'
    }
}

void verifyProperty(Project proj, String name) {
    if (!project.hasProperty(name)) {
        throw new GradleException("You must define the project property '$name'")
    }
}
